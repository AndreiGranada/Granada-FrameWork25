openapi: 3.1.0
info:
  title: MedicalTime API
  version: 1.0.0
  description: API para lembretes de medicação, eventos de tomada, dispositivos, S.O.S. e autenticação.
servers:
  - url: http://localhost:3000
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    UserPublic:
      type: object
      properties:
        id: { type: string }
        email: { type: string, format: email }
        name: { type: string, nullable: true }
        timezone: { type: string }
      required: [id, email, timezone]
    Reminder:
      type: object
      properties:
        id: { type: string }
        name: { type: string }
        purpose: { type: string, nullable: true }
        description: { type: string, nullable: true }
        pricePaid:
          { type: string, nullable: true, description: "Decimal como string" }
        photoUrl: { type: string, nullable: true }
        isActive: { type: boolean }
        schedules:
          type: array
          items: { $ref: "#/components/schemas/Schedule" }
      required: [id, name, isActive]
    ReminderCreate:
      type: object
      required: [name, schedules]
      properties:
        name: { type: string }
        purpose: { type: string }
        description: { type: string }
        pricePaid: { type: string, description: "Decimal como string" }
        photoUrl: { type: string, format: uri }
        schedules:
          type: array
          minItems: 1
          items: { $ref: "#/components/schemas/ScheduleCreate" }
    ReminderUpdate:
      type: object
      properties:
        name: { type: string }
        purpose: { type: string }
        description: { type: string }
        pricePaid: { type: string }
        photoUrl: { type: string, format: uri }
        isActive: { type: boolean }
    Schedule:
      type: object
      properties:
        id: { type: string }
        ingestionTimeMinutes: { type: integer, minimum: 0, maximum: 1439 }
        daysOfWeekBitmask:
          {
            type: integer,
            minimum: 0,
            maximum: 127,
            description: "1=Dom,2=Seg,4=Ter,8=Qua,16=Qui,32=Sex,64=Sáb; 0=todos",
          }
        isActive: { type: boolean }
      required: [id, ingestionTimeMinutes, daysOfWeekBitmask, isActive]
    ScheduleCreate:
      type: object
      required: [ingestionTimeMinutes]
      properties:
        ingestionTimeMinutes: { type: integer, minimum: 0, maximum: 1439 }
        daysOfWeekBitmask: { type: integer, minimum: 0, maximum: 127 }
        isActive: { type: boolean }
    ScheduleUpdate:
      type: object
      properties:
        ingestionTimeMinutes: { type: integer, minimum: 0, maximum: 1439 }
        daysOfWeekBitmask: { type: integer, minimum: 0, maximum: 127 }
        isActive: { type: boolean }
    IntakeEvent:
      type: object
      properties:
        id: { type: string }
        medicationReminderId: { type: string }
        medicationScheduleId: { type: string, nullable: true }
        scheduledAt: { type: string, format: date-time }
        status: { type: string, enum: [PENDING, TAKEN, MISSED] }
        attempts: { type: integer }
        takenAt: { type: string, format: date-time, nullable: true }
      required: [id, medicationReminderId, scheduledAt, status, attempts]
    IntakeEventExpanded:
      type: object
      description: Evento de ingestão com dados do reminder embutidos para evitar round trips.
      properties:
        id: { type: string }
        medicationReminderId: { type: string }
        medicationScheduleId: { type: string, nullable: true }
        scheduledAt: { type: string, format: date-time }
        status: { type: string, enum: [PENDING, TAKEN, MISSED] }
        attempts: { type: integer }
        takenAt: { type: string, format: date-time, nullable: true }
        reminder:
          type: object
          properties:
            id: { type: string }
            name: { type: string }
            photoUrl: { type: string, nullable: true }
          required: [id, name]
        schedule:
          type: object
          nullable: true
          properties:
            id: { type: string }
            ingestionTimeMinutes: { type: integer }
          required: [id, ingestionTimeMinutes]
      required:
        [id, medicationReminderId, scheduledAt, status, attempts, reminder]
    Device:
      type: object
      properties:
        id: { type: string }
        platform: { type: string, enum: [ANDROID, IOS] }
        pushToken: { type: string }
        isActive: { type: boolean }
      required: [id, platform, pushToken, isActive]
    DeviceCreate:
      type: object
      required: [platform, pushToken]
      properties:
        platform: { type: string, enum: [ANDROID, IOS] }
        pushToken: { type: string }
    DeviceUpdate:
      type: object
      properties:
        isActive: { type: boolean }
        pushToken: { type: string }
    EmergencyContact:
      type: object
      properties:
        id: { type: string }
        name: { type: string }
        phone: { type: string }
        priority: { type: integer }
        isActive: { type: boolean }
      required: [id, name, phone, priority, isActive]
    EmergencyContactCreate:
      type: object
      required: [name, phone]
      properties:
        name: { type: string }
        phone: { type: string }
        priority: { type: integer }
    EmergencyContactUpdate:
      type: object
      properties:
        name: { type: string }
        phone: { type: string }
        priority: { type: integer }
        isActive: { type: boolean }
    ErrorResponse:
      type: object
      properties:
        error:
          type: object
          properties:
            code: { type: string }
            message: { type: string }
            details: { type: object, nullable: true }
          required: [code, message]
      required: [error]
  responses:
    UnauthorizedError:
      description: Não autenticado
      content:
        application/json:
          schema: { $ref: "#/components/schemas/ErrorResponse" }
          examples:
            tokenAusente:
              summary: Token não enviado
              value:
                error:
                  code: UNAUTHORIZED
                  message: "Cabeçalho Authorization ausente"
            tokenInvalido:
              summary: Token inválido ou expirado
              value:
                error:
                  code: UNAUTHORIZED
                  message: "Token inválido ou expirado"
    NotFoundError:
      description: Não encontrado
      content:
        application/json:
          schema: { $ref: "#/components/schemas/ErrorResponse" }
          examples:
            generico:
              summary: Recurso inexistente
              value:
                error:
                  code: NOT_FOUND
                  message: "Recurso não encontrado"
    RateLimitError:
      description: Rate limit
      content:
        application/json:
          schema: { $ref: "#/components/schemas/ErrorResponse" }
          examples:
            excesso:
              summary: Muitas requisições
              value:
                error:
                  code: RATE_LIMIT
                  message: "Muitas requisições. Tente novamente mais tarde."
                  details:
                    retryAfterSeconds: 42
    BadRequestError:
      description: Requisição inválida
      content:
        application/json:
          schema: { $ref: "#/components/schemas/ErrorResponse" }
          examples:
            validacao:
              summary: Falha de validação de campos
              value:
                error:
                  code: BAD_REQUEST
                  message: "Falha de validação"
                  details:
                    issues:
                      - path: ["email"]
                        message: "E-mail inválido"
                      - path: ["password"]
                        message: "Mínimo de 6 caracteres"
    ConflictError:
      description: Conflito
      content:
        application/json:
          schema: { $ref: "#/components/schemas/ErrorResponse" }
          examples:
            emailExistente:
              summary: Email já cadastrado
              value:
                error:
                  code: CONFLICT
                  message: "Email já registrado"
            senhaAtualIncorreta:
              summary: Troca de senha com current incorreta
              value:
                error:
                  code: CONFLICT
                  message: "Senha atual incorreta"
    InternalServerError:
      description: Erro interno
      content:
        application/json:
          schema: { $ref: "#/components/schemas/ErrorResponse" }
          examples:
            generico:
              summary: Erro inesperado
              value:
                error:
                  code: INTERNAL_ERROR
                  message: "Erro interno inesperado"
security:
  - bearerAuth: []
paths:
  /health:
    get:
      operationId: getHealth
      summary: Healthcheck
      responses:
        "200": { description: OK }

  /auth/register:
    post:
      operationId: authRegister
      summary: Registrar usuário
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [email, password]
              properties:
                email: { type: string, format: email }
                password: { type: string, minLength: 6 }
                name: { type: string }
      responses:
        "201":
          description: Registrado
          content:
            application/json:
              schema:
                type: object
                properties:
                  user: { $ref: "#/components/schemas/UserPublic" }
                  token: { type: string }
                  refreshToken: { type: string }
                  refreshExpiresAt: { type: string, format: date-time }
        "400": { $ref: "#/components/responses/BadRequestError" }
        "409": { $ref: "#/components/responses/ConflictError" }
        "429": { $ref: "#/components/responses/RateLimitError" }
        "500": { $ref: "#/components/responses/InternalServerError" }

  /auth/login:
    post:
      operationId: authLogin
      summary: Login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [email, password]
              properties:
                email: { type: string, format: email }
                password: { type: string }
            examples:
              default:
                summary: Credenciais válidas
                value:
                  email: user@example.com
                  password: secret123
      responses:
        "200":
          description: Autenticado
          content:
            application/json:
              schema:
                type: object
                properties:
                  user: { $ref: "#/components/schemas/UserPublic" }
                  token: { type: string }
                  refreshToken: { type: string }
                  refreshExpiresAt: { type: string, format: date-time }
              examples:
                sucesso:
                  summary: Login bem sucedido
                  value:
                    user:
                      id: usr_123
                      email: user@example.com
                      name: "Maria"
                      timezone: America/Sao_Paulo
                    token: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                    refreshToken: "c0f6c8c2-4d1b-4c8c-9a7e-abcdef123456"
                    refreshExpiresAt: "2025-09-16T19:20:30.000Z"
  "400": { $ref: "#/components/responses/BadRequestError" }
  "401": { $ref: "#/components/responses/UnauthorizedError" }
  "429": { $ref: "#/components/responses/RateLimitError" }
  "500": { $ref: "#/components/responses/InternalServerError" }

  /auth/forgot:
    post:
      operationId: authForgotPassword
      summary: Solicitar reset de senha
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [email]
              properties:
                email: { type: string, format: email }
      responses:
        "200": { description: Se existir, enviaremos as instruções }
        "400": { $ref: "#/components/responses/BadRequestError" }
        "429": { $ref: "#/components/responses/RateLimitError" }
        "500": { $ref: "#/components/responses/InternalServerError" }

  /auth/reset:
    post:
      operationId: authResetPassword
      summary: Redefinir senha
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [token, password]
              properties:
                token: { type: string }
                password: { type: string, minLength: 6 }
      responses:
        "200": { description: Senha redefinida }
        "400": { $ref: "#/components/responses/BadRequestError" }
        "500": { $ref: "#/components/responses/InternalServerError" }

  /auth/refresh:
    post:
      operationId: authRefreshToken
      summary: Renovar token de acesso
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [refreshToken]
              properties:
                refreshToken: { type: string }
      responses:
        "200":
          description: Novo token emitido
          content:
            application/json:
              schema:
                type: object
                properties:
                  token: { type: string }
                  refreshToken: { type: string }
                  refreshExpiresAt: { type: string, format: date-time }
                  user: { $ref: "#/components/schemas/UserPublic" }
        "400": { $ref: "#/components/responses/BadRequestError" }
        "401": { $ref: "#/components/responses/UnauthorizedError" }
        "500": { $ref: "#/components/responses/InternalServerError" }

  /auth/logout:
    post:
      operationId: authLogout
      summary: Logout global
      responses:
        "200": { description: Ok }
        "500": { $ref: "#/components/responses/InternalServerError" }

  /me:
    get:
      operationId: getCurrentUser
      summary: Dados do usuário autenticado
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Ok
          content:
            application/json:
              schema:
                type: object
                properties:
                  user: { $ref: "#/components/schemas/UserPublic" }
        "400": { $ref: "#/components/responses/BadRequestError" }
        "401": { $ref: "#/components/responses/UnauthorizedError" }
        "404": { $ref: "#/components/responses/NotFoundError" }
        "500": { $ref: "#/components/responses/InternalServerError" }
    patch:
      operationId: updateCurrentUser
      summary: Atualizar perfil do usuário
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name: { type: string }
                timezone: { type: string }
                passwordCurrent: { type: string, minLength: 6 }
                passwordNew: { type: string, minLength: 6 }
              anyOf:
                - required: [name]
                - required: [timezone]
                - required: [passwordCurrent, passwordNew]
              description: Pelo menos um campo deve ser enviado. Para troca de senha é obrigatório enviar passwordCurrent e passwordNew.
            examples:
              alterar_nome:
                summary: Alterar apenas o nome
                value: { name: "Novo Nome" }
              trocar_senha:
                summary: Trocar senha
                value:
                  { passwordCurrent: "antiga123", passwordNew: "NovaSenha456" }
      responses:
        "200":
          description: Perfil atualizado
          content:
            application/json:
              schema:
                type: object
                properties:
                  user: { $ref: "#/components/schemas/UserPublic" }
        "400": { $ref: "#/components/responses/BadRequestError" }
        "401": { $ref: "#/components/responses/UnauthorizedError" }
        "404": { $ref: "#/components/responses/NotFoundError" }
        "409": { $ref: "#/components/responses/ConflictError" }
        "500": { $ref: "#/components/responses/InternalServerError" }

  /reminders:
    get:
      operationId: listReminders
      summary: Listar lembretes (array simples)
      responses:
        "200":
          description: Lista de lembretes
          content:
            application/json:
              schema:
                type: array
                items: { $ref: "#/components/schemas/Reminder" }
        "500": { $ref: "#/components/responses/InternalServerError" }
    post:
      operationId: createReminder
      summary: Criar lembrete
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/ReminderCreate" }
            examples:
              basico:
                summary: Lembrete diário simples
                value:
                  name: "Vitamina D"
                  purpose: "Saúde óssea"
                  description: "Cápsula de 2000 UI"
                  schedules:
                    - ingestionTimeMinutes: 480
                      daysOfWeekBitmask: 0
      responses:
        "201": { description: Criado }
        "400": { $ref: "#/components/responses/BadRequestError" }
        "500": { $ref: "#/components/responses/InternalServerError" }

  /reminders/{id}:
    get:
      operationId: getReminder
      summary: Obter lembrete
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        "200": { description: Ok }
        "400": { $ref: "#/components/responses/BadRequestError" }
        "404": { $ref: "#/components/responses/NotFoundError" }
        "500": { $ref: "#/components/responses/InternalServerError" }
    patch:
      operationId: updateReminder
      summary: Atualizar lembrete
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/ReminderUpdate" }
      responses:
        "200": { description: Ok }
        "400": { $ref: "#/components/responses/BadRequestError" }
        "404": { $ref: "#/components/responses/NotFoundError" }
        "500": { $ref: "#/components/responses/InternalServerError" }
    delete:
      operationId: deleteReminder
      summary: Desativar (soft delete) lembrete
      description: Marca o lembrete e seus schedules como inativos (isActive=false). Idempotente.
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        "204": { description: Desativado }
        "400": { $ref: "#/components/responses/BadRequestError" }
        "404": { $ref: "#/components/responses/NotFoundError" }
        "500": { $ref: "#/components/responses/InternalServerError" }

  /reminders/{id}/schedules:
    post:
      operationId: addReminderSchedule
      summary: Adicionar schedule a um lembrete
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/ScheduleCreate" }
            examples:
              manha_segqua:
                summary: Dose às 08:30 Seg e Qua
                value:
                  ingestionTimeMinutes: 510
                  daysOfWeekBitmask: 2 + 8
      responses:
        "201": { description: Criado }
        "400": { $ref: "#/components/responses/BadRequestError" }
        "404": { $ref: "#/components/responses/NotFoundError" }
        "500": { $ref: "#/components/responses/InternalServerError" }

  /reminders/schedules/{scheduleId}:
    patch:
      operationId: updateSchedule
      summary: Atualizar schedule
      parameters:
        - in: path
          name: scheduleId
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/ScheduleUpdate" }
      responses:
        "200": { description: Ok }
        "400": { $ref: "#/components/responses/BadRequestError" }
        "404": { $ref: "#/components/responses/NotFoundError" }
        "500": { $ref: "#/components/responses/InternalServerError" }
    delete:
      operationId: deleteSchedule
      summary: Remover schedule
      parameters:
        - in: path
          name: scheduleId
          required: true
          schema: { type: string }
      responses:
        "204": { description: Removido }
        "400": { $ref: "#/components/responses/BadRequestError" }
        "404": { $ref: "#/components/responses/NotFoundError" }
        "500": { $ref: "#/components/responses/InternalServerError" }

  /intakes:
    get:
      operationId: listIntakeEvents
      summary: Listar eventos de tomada no intervalo (array simples)
      parameters:
        - in: query
          name: from
          schema: { type: string, format: date-time }
        - in: query
          name: to
          schema: { type: string, format: date-time }
        - in: query
          name: hours
          schema: { type: string }
        - in: query
          name: status
          schema: { type: string, enum: [PENDING, TAKEN, MISSED] }
      responses:
        "200":
          description: Lista de eventos
          content:
            application/json:
              schema:
                type: array
                items: { $ref: "#/components/schemas/IntakeEventExpanded" }
              examples:
                proximas4h:
                  summary: Próximas 4 horas
                  value:
                    - id: intk_1
                      medicationReminderId: rem_1
                      medicationScheduleId: sch_1
                      scheduledAt: 2025-09-16T19:30:00.000Z
                      status: PENDING
                      attempts: 0
                      reminder:
                        id: rem_1
                        name: Vitamina D
                        photoUrl: null
                      schedule:
                        id: sch_1
                        ingestionTimeMinutes: 510
                    - id: intk_2
                      medicationReminderId: rem_2
                      medicationScheduleId: sch_5
                      scheduledAt: 2025-09-16T20:15:00.000Z
                      status: PENDING
                      attempts: 0
                      reminder:
                        id: rem_2
                        name: Ômega 3
                        photoUrl: null
                      schedule:
                        id: sch_5
                        ingestionTimeMinutes: 600
        "400": { $ref: "#/components/responses/BadRequestError" }
        "500": { $ref: "#/components/responses/InternalServerError" }

  /intakes/history:
    get:
      operationId: listIntakeHistory
      summary: Histórico de eventos recentes
      parameters:
        - in: query
          name: days
          schema: { type: string }
      responses:
        "200":
          description: Lista de eventos
          content:
            application/json:
              schema:
                type: array
                items: { $ref: "#/components/schemas/IntakeEventExpanded" }
        "400": { $ref: "#/components/responses/BadRequestError" }
        "500": { $ref: "#/components/responses/InternalServerError" }

  /intakes/{id}/taken:
    post:
      operationId: markIntakeTaken
      summary: Marcar evento como tomado
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        "200": { description: Ok }
        "400": { $ref: "#/components/responses/BadRequestError" }
        "404": { $ref: "#/components/responses/NotFoundError" }
        "500": { $ref: "#/components/responses/InternalServerError" }

  /emergency/emergency-contacts:
    get:
      operationId: listEmergencyContacts
      summary: Listar contatos de emergência (array simples)
      responses:
        "200":
          description: Lista de contatos
          content:
            application/json:
              schema:
                type: array
                items: { $ref: "#/components/schemas/EmergencyContact" }
        "500": { $ref: "#/components/responses/InternalServerError" }
    post:
      operationId: createEmergencyContact
      summary: Criar contato de emergência
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/EmergencyContactCreate" }
      responses:
        "201": { description: Criado }
        "400": { $ref: "#/components/responses/BadRequestError" }
        "500": { $ref: "#/components/responses/InternalServerError" }

  /emergency/emergency-contacts/{id}:
    patch:
      operationId: updateEmergencyContact
      summary: Atualizar contato de emergência
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/EmergencyContactUpdate" }
      responses:
        "200": { description: Ok }
        "400": { $ref: "#/components/responses/BadRequestError" }
        "404": { $ref: "#/components/responses/NotFoundError" }
        "500": { $ref: "#/components/responses/InternalServerError" }
    delete:
      operationId: deleteEmergencyContact
      summary: Remover contato de emergência
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        "204": { description: Removido }
        "400": { $ref: "#/components/responses/BadRequestError" }
        "404": { $ref: "#/components/responses/NotFoundError" }
        "500": { $ref: "#/components/responses/InternalServerError" }

  /emergency/sos:
    post:
      operationId: triggerSOS
      summary: Disparar SOS
      description: Dispara fluxo de notificação para contatos de emergência
      tags: [Emergency]
      x-codeSamples:
        - lang: curl
          label: Curl exemplo
          source: |
            curl -X POST \
              -H "Authorization: Bearer <TOKEN>" \
              http://localhost:3000/emergency/sos
      responses:
        "200": { description: Ok }
        "429": { $ref: "#/components/responses/RateLimitError" }
        "500": { $ref: "#/components/responses/InternalServerError" }

  /devices:
    get:
      operationId: listDevices
      summary: Listar dispositivos (array simples)
      responses:
        "200":
          description: Lista de dispositivos
          content:
            application/json:
              schema:
                type: array
                items: { $ref: "#/components/schemas/Device" }
        "500": { $ref: "#/components/responses/InternalServerError" }
    post:
      operationId: registerDevice
      summary: Registrar dispositivo
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/DeviceCreate" }
            examples:
              android_expo:
                summary: Dispositivo Android com token Expo
                value:
                  platform: ANDROID
                  pushToken: ExponentPushToken[xxxxxxxxxxxxxxxxxxxxxx]
      responses:
        "201": { description: Criado }
        "400": { $ref: "#/components/responses/BadRequestError" }
        "500": { $ref: "#/components/responses/InternalServerError" }

  /devices/{id}:
    patch:
      operationId: updateDevice
      summary: Atualizar dispositivo
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/DeviceUpdate" }
      responses:
        "200": { description: Ok }
        "400": { $ref: "#/components/responses/BadRequestError" }
        "404": { $ref: "#/components/responses/NotFoundError" }
        "500": { $ref: "#/components/responses/InternalServerError" }
    delete:
      operationId: deleteDevice
      summary: Remover dispositivo
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        "204": { description: Removido }
        "400": { $ref: "#/components/responses/BadRequestError" }
        "404": { $ref: "#/components/responses/NotFoundError" }
        "500": { $ref: "#/components/responses/InternalServerError" }

  /dev/test-sos:
    post:
      operationId: devTestSOS
      summary: Disparar SOS (dev)
      x-codeSamples:
        - lang: curl
          label: Curl dev
          source: |
            curl -X POST http://localhost:3000/dev/test-sos
      responses:
        "200": { description: Ok }
        "500": { $ref: "#/components/responses/InternalServerError" }

  /dev/test-alarm:
    post:
      operationId: devTestAlarm
      summary: Disparar alarme (dev)
      x-codeSamples:
        - lang: curl
          label: Curl dev alarm
          source: |
            curl -X POST http://localhost:3000/dev/test-alarm
      responses:
        "200": { description: Ok }
        "500": { $ref: "#/components/responses/InternalServerError" }
